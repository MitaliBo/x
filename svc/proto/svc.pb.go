// Code generated by protoc-gen-go.
// source: svc.proto
// DO NOT EDIT!

/*
Package svc is a generated protocol buffer package.

It is generated from these files:
	svc.proto

It has these top-level messages:
	AppsListParams
	AppsList
	Manifest
	App
	AppUpdate
	AppInspect
	AppDelete
	Ok
*/
package svc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AppsListParams struct {
	LabelKey string `protobuf:"bytes,1,opt,name=labelKey" json:"labelKey,omitempty"`
	LabelVal string `protobuf:"bytes,2,opt,name=labelVal" json:"labelVal,omitempty"`
	// will be matched to app names
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *AppsListParams) Reset()                    { *m = AppsListParams{} }
func (m *AppsListParams) String() string            { return proto.CompactTextString(m) }
func (*AppsListParams) ProtoMessage()               {}
func (*AppsListParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AppsListParams) GetLabelKey() string {
	if m != nil {
		return m.LabelKey
	}
	return ""
}

func (m *AppsListParams) GetLabelVal() string {
	if m != nil {
		return m.LabelVal
	}
	return ""
}

func (m *AppsListParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AppsList struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Apps    []*App `protobuf:"bytes,2,rep,name=apps" json:"apps,omitempty"`
}

func (m *AppsList) Reset()                    { *m = AppsList{} }
func (m *AppsList) String() string            { return proto.CompactTextString(m) }
func (*AppsList) ProtoMessage()               {}
func (*AppsList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AppsList) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AppsList) GetApps() []*App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type Manifest struct {
	Environment map[string]string `protobuf:"bytes,1,rep,name=environment" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels      map[string]string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DockerImage string            `protobuf:"bytes,3,opt,name=dockerImage" json:"dockerImage,omitempty"`
	Name        string            `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *Manifest) Reset()                    { *m = Manifest{} }
func (m *Manifest) String() string            { return proto.CompactTextString(m) }
func (*Manifest) ProtoMessage()               {}
func (*Manifest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Manifest) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *Manifest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Manifest) GetDockerImage() string {
	if m != nil {
		return m.DockerImage
	}
	return ""
}

func (m *Manifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type App struct {
	Id              string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name            string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	DockerImage     string            `protobuf:"bytes,3,opt,name=dockerImage" json:"dockerImage,omitempty"`
	Environment     map[string]string `protobuf:"bytes,4,rep,name=environment" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels          map[string]string `protobuf:"bytes,5,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AuthorizedUsers []string          `protobuf:"bytes,6,rep,name=authorizedUsers" json:"authorizedUsers,omitempty"`
	Instances       int32             `protobuf:"varint,7,opt,name=instances" json:"instances,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *App) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *App) GetDockerImage() string {
	if m != nil {
		return m.DockerImage
	}
	return ""
}

func (m *App) GetEnvironment() map[string]string {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *App) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *App) GetAuthorizedUsers() []string {
	if m != nil {
		return m.AuthorizedUsers
	}
	return nil
}

func (m *App) GetInstances() int32 {
	if m != nil {
		return m.Instances
	}
	return 0
}

type AppUpdate struct {
	Name             string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NewImage         string            `protobuf:"bytes,2,opt,name=newImage" json:"newImage,omitempty"`
	EnvAdd           map[string]string `protobuf:"bytes,3,rep,name=envAdd" json:"envAdd,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EnvRm            []string          `protobuf:"bytes,4,rep,name=envRm" json:"envRm,omitempty"`
	LabelAdd         map[string]string `protobuf:"bytes,5,rep,name=labelAdd" json:"labelAdd,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LabelRm          map[string]string `protobuf:"bytes,6,rep,name=labelRm" json:"labelRm,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	GrantUsers       []string          `protobuf:"bytes,7,rep,name=grantUsers" json:"grantUsers,omitempty"`
	RevokeUsers      []string          `protobuf:"bytes,8,rep,name=revokeUsers" json:"revokeUsers,omitempty"`
	NewInstanceCount int32             `protobuf:"varint,9,opt,name=newInstanceCount" json:"newInstanceCount,omitempty"`
}

func (m *AppUpdate) Reset()                    { *m = AppUpdate{} }
func (m *AppUpdate) String() string            { return proto.CompactTextString(m) }
func (*AppUpdate) ProtoMessage()               {}
func (*AppUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppUpdate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppUpdate) GetNewImage() string {
	if m != nil {
		return m.NewImage
	}
	return ""
}

func (m *AppUpdate) GetEnvAdd() map[string]string {
	if m != nil {
		return m.EnvAdd
	}
	return nil
}

func (m *AppUpdate) GetEnvRm() []string {
	if m != nil {
		return m.EnvRm
	}
	return nil
}

func (m *AppUpdate) GetLabelAdd() map[string]string {
	if m != nil {
		return m.LabelAdd
	}
	return nil
}

func (m *AppUpdate) GetLabelRm() map[string]string {
	if m != nil {
		return m.LabelRm
	}
	return nil
}

func (m *AppUpdate) GetGrantUsers() []string {
	if m != nil {
		return m.GrantUsers
	}
	return nil
}

func (m *AppUpdate) GetRevokeUsers() []string {
	if m != nil {
		return m.RevokeUsers
	}
	return nil
}

func (m *AppUpdate) GetNewInstanceCount() int32 {
	if m != nil {
		return m.NewInstanceCount
	}
	return 0
}

type AppInspect struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AppInspect) Reset()                    { *m = AppInspect{} }
func (m *AppInspect) String() string            { return proto.CompactTextString(m) }
func (*AppInspect) ProtoMessage()               {}
func (*AppInspect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppInspect) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AppDelete struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *AppDelete) Reset()                    { *m = AppDelete{} }
func (m *AppDelete) String() string            { return proto.CompactTextString(m) }
func (*AppDelete) ProtoMessage()               {}
func (*AppDelete) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AppDelete) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Ok struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Ok) Reset()                    { *m = Ok{} }
func (m *Ok) String() string            { return proto.CompactTextString(m) }
func (*Ok) ProtoMessage()               {}
func (*Ok) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Ok) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*AppsListParams)(nil), "AppsListParams")
	proto.RegisterType((*AppsList)(nil), "AppsList")
	proto.RegisterType((*Manifest)(nil), "Manifest")
	proto.RegisterType((*App)(nil), "App")
	proto.RegisterType((*AppUpdate)(nil), "AppUpdate")
	proto.RegisterType((*AppInspect)(nil), "AppInspect")
	proto.RegisterType((*AppDelete)(nil), "AppDelete")
	proto.RegisterType((*Ok)(nil), "Ok")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Apps service

type AppsClient interface {
	List(ctx context.Context, in *AppsListParams, opts ...grpc.CallOption) (*AppsList, error)
	Create(ctx context.Context, in *Manifest, opts ...grpc.CallOption) (*App, error)
	Update(ctx context.Context, in *AppUpdate, opts ...grpc.CallOption) (*App, error)
	Inspect(ctx context.Context, in *AppInspect, opts ...grpc.CallOption) (*App, error)
	Delete(ctx context.Context, in *AppDelete, opts ...grpc.CallOption) (*Ok, error)
}

type appsClient struct {
	cc *grpc.ClientConn
}

func NewAppsClient(cc *grpc.ClientConn) AppsClient {
	return &appsClient{cc}
}

func (c *appsClient) List(ctx context.Context, in *AppsListParams, opts ...grpc.CallOption) (*AppsList, error) {
	out := new(AppsList)
	err := grpc.Invoke(ctx, "/Apps/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) Create(ctx context.Context, in *Manifest, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/Apps/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) Update(ctx context.Context, in *AppUpdate, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/Apps/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) Inspect(ctx context.Context, in *AppInspect, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/Apps/Inspect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) Delete(ctx context.Context, in *AppDelete, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := grpc.Invoke(ctx, "/Apps/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Apps service

type AppsServer interface {
	List(context.Context, *AppsListParams) (*AppsList, error)
	Create(context.Context, *Manifest) (*App, error)
	Update(context.Context, *AppUpdate) (*App, error)
	Inspect(context.Context, *AppInspect) (*App, error)
	Delete(context.Context, *AppDelete) (*Ok, error)
}

func RegisterAppsServer(s *grpc.Server, srv AppsServer) {
	s.RegisterService(&_Apps_serviceDesc, srv)
}

func _Apps_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppsListParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Apps/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).List(ctx, req.(*AppsListParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Manifest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Apps/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).Create(ctx, req.(*Manifest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Apps/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).Update(ctx, req.(*AppUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInspect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Apps/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).Inspect(ctx, req.(*AppInspect))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Apps/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).Delete(ctx, req.(*AppDelete))
	}
	return interceptor(ctx, in, info, handler)
}

var _Apps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Apps",
	HandlerType: (*AppsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Apps_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Apps_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Apps_Update_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _Apps_Inspect_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Apps_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.proto",
}

func init() { proto.RegisterFile("svc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x56, 0x1c, 0x37, 0x89, 0x27, 0xd0, 0x86, 0x2d, 0x05, 0xe3, 0x96, 0x12, 0x99, 0x4b, 0x54,
	0x09, 0x47, 0x2d, 0x88, 0x9f, 0x42, 0x2b, 0x59, 0xa5, 0x87, 0x8a, 0xa2, 0x22, 0x4b, 0xed, 0x89,
	0xcb, 0x36, 0x5e, 0x82, 0x15, 0x7b, 0xbd, 0xf2, 0x3a, 0x46, 0x05, 0x71, 0xe1, 0xcc, 0x8d, 0x97,
	0xe0, 0x2d, 0x78, 0x08, 0x5e, 0x81, 0x17, 0xe0, 0x0d, 0x90, 0x77, 0xd7, 0x3f, 0x29, 0x41, 0x90,
	0x13, 0xb7, 0x9d, 0x9f, 0x6f, 0xf2, 0xcd, 0x37, 0xe3, 0x09, 0x18, 0x3c, 0x1b, 0x39, 0x2c, 0x89,
	0xd3, 0xd8, 0xda, 0x18, 0xc7, 0xf1, 0x38, 0x24, 0x43, 0xcc, 0x82, 0x21, 0xa6, 0x34, 0x4e, 0x71,
	0x1a, 0xc4, 0x94, 0xcb, 0xa8, 0xfd, 0x1a, 0x96, 0x5d, 0xc6, 0xf8, 0x71, 0xc0, 0xd3, 0x57, 0x38,
	0xc1, 0x11, 0x47, 0x16, 0x74, 0x42, 0x7c, 0x4e, 0xc2, 0x17, 0xe4, 0xc2, 0x6c, 0xf4, 0x1b, 0x03,
	0xc3, 0x2b, 0xed, 0x32, 0x76, 0x86, 0x43, 0x53, 0xab, 0xc5, 0xce, 0x70, 0x88, 0x10, 0xe8, 0x14,
	0x47, 0xc4, 0x6c, 0x0a, 0xbf, 0x78, 0xdb, 0xfb, 0xd0, 0x29, 0xaa, 0x23, 0x13, 0xda, 0x11, 0xe1,
	0x1c, 0x8f, 0x89, 0x2a, 0x5b, 0x98, 0xc8, 0x04, 0x1d, 0x33, 0xc6, 0x4d, 0xad, 0xdf, 0x1c, 0x74,
	0x77, 0x74, 0xc7, 0x65, 0xcc, 0x13, 0x1e, 0xfb, 0xab, 0x06, 0x9d, 0x97, 0x98, 0x06, 0x6f, 0x08,
	0x4f, 0xd1, 0x33, 0xe8, 0x12, 0x9a, 0x05, 0x49, 0x4c, 0x23, 0x42, 0x53, 0xb3, 0x21, 0xb2, 0x2d,
	0xa7, 0x88, 0x3b, 0x87, 0x55, 0xf0, 0x90, 0xa6, 0xc9, 0x85, 0x57, 0x4f, 0x47, 0xf7, 0xa0, 0x25,
	0xa8, 0x16, 0x3f, 0xb3, 0x56, 0x01, 0x8f, 0x85, 0x5f, 0x62, 0x54, 0x12, 0xea, 0x43, 0xd7, 0x8f,
	0x47, 0x13, 0x92, 0x1c, 0x45, 0x39, 0x63, 0xd9, 0x54, 0xdd, 0x55, 0xf6, 0xab, 0x57, 0xfd, 0x5a,
	0xfb, 0xd0, 0xbb, 0xcc, 0x02, 0xf5, 0xa0, 0x39, 0x29, 0xa5, 0xcc, 0x9f, 0xe8, 0x3a, 0x2c, 0x65,
	0x38, 0x9c, 0x12, 0x25, 0xa1, 0x34, 0x76, 0xb5, 0xc7, 0x0d, 0xeb, 0x09, 0x74, 0x6b, 0x64, 0x16,
	0x81, 0xda, 0x3f, 0x35, 0x68, 0xba, 0x8c, 0xa1, 0x65, 0xd0, 0x02, 0x5f, 0x41, 0xb4, 0xc0, 0x2f,
	0x69, 0x6a, 0x15, 0xcd, 0x7f, 0x68, 0xee, 0xd1, 0xac, 0xd6, 0xba, 0x92, 0xcc, 0x65, 0xec, 0x2f,
	0x32, 0x0f, 0x4a, 0x99, 0x97, 0x04, 0xa6, 0x27, 0x30, 0xf3, 0x14, 0x1e, 0xc0, 0x0a, 0x9e, 0xa6,
	0x6f, 0xe3, 0x24, 0x78, 0x4f, 0xfc, 0x53, 0x4e, 0x12, 0x6e, 0xb6, 0xfa, 0xcd, 0x81, 0xe1, 0x5d,
	0x76, 0xa3, 0x0d, 0x30, 0x02, 0xca, 0x53, 0x4c, 0x47, 0x84, 0x9b, 0xed, 0x7e, 0x63, 0xb0, 0xe4,
	0x55, 0x8e, 0xff, 0xa9, 0xf9, 0x67, 0x1d, 0x0c, 0x97, 0xb1, 0x53, 0xe6, 0xe3, 0xb4, 0x5a, 0x88,
	0x46, 0x4d, 0x69, 0x0b, 0x3a, 0x94, 0xbc, 0x93, 0x32, 0xab, 0x0f, 0xa6, 0xb0, 0x91, 0x03, 0x2d,
	0x42, 0x33, 0xd7, 0xf7, 0xcd, 0xa6, 0x90, 0xea, 0x86, 0x53, 0xd6, 0xca, 0x45, 0x76, 0x7d, 0x5f,
	0x09, 0x26, 0xb3, 0x72, 0x1e, 0x84, 0x66, 0x5e, 0x24, 0xa6, 0x61, 0x78, 0xd2, 0x40, 0x0f, 0xd4,
	0x27, 0x99, 0xd7, 0x91, 0x92, 0x9b, 0xb5, 0x3a, 0xc7, 0x2a, 0x24, 0x2b, 0x95, 0x99, 0x68, 0x1b,
	0xda, 0xe2, 0xed, 0x45, 0x42, 0xf4, 0xee, 0xce, 0xcd, 0xcb, 0x20, 0x2f, 0x92, 0x98, 0x22, 0x0f,
	0x6d, 0x02, 0x8c, 0x13, 0x4c, 0x53, 0x39, 0xaa, 0xb6, 0xe0, 0x50, 0xf3, 0xe4, 0x4b, 0x95, 0x90,
	0x2c, 0x9e, 0x10, 0x99, 0xd0, 0x11, 0x09, 0x75, 0x17, 0xda, 0x82, 0x5e, 0xde, 0xbc, 0x9a, 0xdc,
	0x41, 0x3c, 0xa5, 0xa9, 0x69, 0x88, 0x71, 0xfe, 0xe6, 0xcf, 0xa7, 0x52, 0xd3, 0x60, 0xa1, 0x81,
	0x3e, 0x85, 0xab, 0x33, 0x6d, 0x2f, 0x04, 0xde, 0x85, 0x2b, 0xf5, 0xf6, 0x17, 0x5a, 0x87, 0x3e,
	0x80, 0xcb, 0xd8, 0x11, 0xe5, 0x8c, 0x8c, 0xd2, 0x79, 0xeb, 0x60, 0xdf, 0x11, 0xfb, 0xf2, 0x9c,
	0x84, 0x64, 0xfe, 0xbe, 0xd8, 0x9b, 0xa0, 0x9d, 0x4c, 0xfe, 0x7c, 0x2a, 0x77, 0xbe, 0x69, 0xa0,
	0xe7, 0x17, 0x15, 0xed, 0x81, 0x2e, 0xae, 0xea, 0x8a, 0x33, 0x7b, 0xbe, 0x2d, 0xa3, 0x74, 0xd8,
	0xb7, 0x3e, 0x7d, 0xff, 0xf1, 0x45, 0x5b, 0x45, 0xd7, 0xc4, 0xed, 0xcf, 0xb6, 0x87, 0xf9, 0x4d,
	0x1d, 0x86, 0x39, 0xec, 0x21, 0xb4, 0x0e, 0x12, 0x92, 0x6f, 0xad, 0x51, 0xde, 0x41, 0x4b, 0x5c,
	0x5e, 0x7b, 0x5d, 0xa0, 0xd6, 0xec, 0xd5, 0x19, 0xd4, 0x48, 0x66, 0xef, 0x43, 0x4b, 0x6d, 0x3b,
	0x54, 0x0b, 0xa3, 0x80, 0xb6, 0x00, 0x6e, 0xd8, 0xd6, 0x0c, 0xf0, 0x43, 0xde, 0xd7, 0xc7, 0xe1,
	0x54, 0xa2, 0x5c, 0x68, 0x17, 0xfa, 0x74, 0x9d, 0x4a, 0x2c, 0x55, 0xe1, 0xae, 0xa8, 0x70, 0x1b,
	0xad, 0xcf, 0xab, 0x10, 0x28, 0xdc, 0x1e, 0xb4, 0x94, 0x80, 0x82, 0x82, 0x7c, 0x5b, 0x4d, 0xe7,
	0x64, 0x52, 0x30, 0xd8, 0x9a, 0xcb, 0xc0, 0x17, 0x89, 0xe7, 0x2d, 0xf1, 0xbf, 0x77, 0xff, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xd2, 0x9c, 0x49, 0x22, 0x07, 0x00, 0x00,
}
