// Code generated by go-bindata. DO NOT EDIT.
// sources:
// static/gruvbox.css
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticGruvboxCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x4d\x6e\xdb\x30\x10\x85\xf7\x3c\xc5\x00\xde\xb4\x80\x14\x98\x52\xe4\x38\xf4\xa6\xdd\xf5\x1a\xfc\x19\x5a\x44\x48\x51\xa5\x68\xd7\x41\xa1\xbb\x17\xa2\xe4\x44\x62\x93\xd0\x0b\x0b\x43\xce\x7b\x33\xef\x73\xdc\x74\xf0\x97\x00\x68\xdf\xc5\x52\x73\x67\xec\x2b\x83\x9f\xc1\x70\x5b\xc0\x2f\xb4\x57\x8c\x46\xf2\x02\x06\xde\x0d\xe5\x80\xc1\xe8\x13\x01\x70\xfc\x56\xfe\x31\x2a\xb6\x0c\xea\x63\x40\x37\xd5\x7a\xae\x94\xe9\xce\x0c\xaa\xa5\xe0\x78\x38\x9b\x8e\x01\xbf\x44\x7f\x22\x23\x21\xc2\xab\xd7\xe4\x25\xb8\x7c\x39\x07\x7f\xe9\x14\x83\x5d\x75\x9c\x7e\x53\x83\xf4\xd6\x07\x06\xe9\xec\x50\x28\x21\xaa\xd4\xd7\x07\xcc\xda\xca\xe5\xe9\xae\x96\xf5\xb1\x3e\x6c\xec\xe9\xec\x2e\x7c\x50\x18\x18\xec\x93\x04\x2f\x80\x33\x2e\xa3\xb9\xe2\xf4\x75\x35\x83\x89\xa8\x92\xea\x5d\x4a\xd0\x43\x75\x4c\x52\x1f\xf8\x50\x55\xed\x2b\x9a\xa4\x5a\x5a\x40\x5b\x15\xd0\xd6\x05\xb4\x8f\x05\xb4\x4d\x92\x99\xb7\x2d\x85\x8f\xd1\x3b\x06\x0f\x34\xa5\x30\x6d\x6d\xbd\x7c\xf9\x7d\xf1\x71\x59\x22\xcd\x55\x5a\xd4\x91\x01\xed\x6f\x30\x78\x6b\x14\xec\x84\xe2\xf8\x5c\xaf\x73\xdb\x3f\x34\xe8\x80\xee\xfb\xdb\x66\xbf\x75\x79\x24\xe4\x87\x43\x65\x38\x7c\xeb\x03\x6a\x0c\xc3\x3c\x71\x39\xc8\x16\x1d\x32\xb0\xe6\xdc\xc6\xef\xc9\x78\xb2\x5e\xf2\x9f\xcf\x86\x82\x16\x9a\xca\xa7\xd3\xdb\xe5\x86\xc5\x7b\xca\x00\x23\x49\x7f\x77\x26\xb9\xd4\x5b\x62\x77\x7e\xf7\x27\x39\x9f\xa5\xf1\x9d\xd2\x4a\xfc\x0b\x5a\x9b\xe9\x56\xcc\x3e\x9d\x43\x3f\xeb\x46\x3d\x6d\xe4\x3f\x21\x38\x9f\x8f\x39\xae\xba\x33\x9e\xeb\x3d\xfe\xa7\x7a\x68\x1a\xd9\x3c\x9e\x32\xf5\x9c\x6d\x96\x50\x7e\x39\x92\x91\xfc\x0b\x00\x00\xff\xff\x20\x13\x05\xe2\xa8\x03\x00\x00")

func staticGruvboxCssBytes() ([]byte, error) {
	return bindataRead(
		_staticGruvboxCss,
		"static/gruvbox.css",
	)
}

func staticGruvboxCss() (*asset, error) {
	bytes, err := staticGruvboxCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/gruvbox.css", size: 936, mode: os.FileMode(420), modTime: time.Unix(1559522447, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/gruvbox.css": staticGruvboxCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"gruvbox.css": &bintree{staticGruvboxCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

